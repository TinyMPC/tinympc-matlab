/*
 * This file was autogenerated by TinyMPC on Tue Nov 14 05:15:07 2023
 */

#include <iostream>

#include <tinympc/admm.hpp>
#include <tinympc/tiny_data_workspace.hpp>

using namespace Eigen;
IOFormat CleanFmt(4, 0, ", ", "\n", "[", "]");

#ifdef __cplusplus
extern "C" {
#endif

int main()
{
	int exitflag = 1;
	// Double check some data
    TinyWorkspace* work = tiny_data_solver.work;
    tiny_data_solver.work->Xref = tiny_MatrixNxNh::Zero();
    tiny_data_solver.work->Uref = tiny_MatrixNuNhm1::Zero();
	std::cout << tiny_data_solver.settings->max_iter << std::endl;
	std::cout << tiny_data_solver.cache->AmBKt.format(CleanFmt) << std::endl;
	std::cout << tiny_data_solver.work->Adyn.format(CleanFmt) << std::endl;
    tiny_VectorNx x0, x1; // current and next simulation states
    x0 << 0.0, 0, 0.1, 0; // initial state

    int i = 0;
    for (int k = 0; k < 200; ++k)
    {
        printf("tracking error at step %2d: %.4f\n", k, (x0 - work->Xref.col(1)).norm());

        // 1. Update measurement
        work->x.col(0) = x0;

        // 2. Update reference (if needed)

        // 3. Reset dual variables (if needed)
        work->y = tiny_MatrixNuNhm1::Zero();
        work->g = tiny_MatrixNxNh::Zero();

        // 4. Solve MPC problem
        exitflag = tiny_solve(&tiny_data_solver);
        if (exitflag == 0)
         	printf("HOORAY! Solved with no error!\n");
        else{
         	printf("OOPS! Something went wrong!\n");
         	break;}

        std::cout << work->iter << std::endl;
        std::cout << work->u.col(0).transpose().format(CleanFmt) << std::endl;

        // 5. Simulate forward
        // work->u.col(0) = -tiny_data_solver.cache->Kinf * (x0 - work->Xref.col(0));
        x1 = work->Adyn * x0 + work->Bdyn * work->u.col(0);
        x0 = x1;
        std::cout << x0.transpose().format(CleanFmt) << std::endl;
    }
	exitflag = tiny_solve(&tiny_data_solver);

	if (exitflag == 0) printf("HOORAY! Solved with no error!\n");
	else printf("OOPS! Something went wrong!\n");
	return 0;
}

#ifdef __cplusplus
} /* extern "C" */
#endif
